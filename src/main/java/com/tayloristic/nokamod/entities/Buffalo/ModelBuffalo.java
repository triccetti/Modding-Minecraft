// Date: 12/17/2016 12:17:28 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package com.tayloristic.nokamod.entities.Buffalo;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.util.math.MathHelper;

public class ModelBuffalo extends ModelBase {
  //fields
    ModelRenderer head;
    ModelRenderer body;
    ModelRenderer leg1;
    ModelRenderer leg2;
    ModelRenderer leg3;
    ModelRenderer leg4;
    ModelRenderer horn1;
    ModelRenderer horn2;
    ModelRenderer tail;
    protected float childYOffset = 8.0F;
    protected float childZOffset = 4.0F;

  
  public ModelBuffalo() {
    textureWidth = 256;
    textureHeight = 128;
    
      head = new ModelRenderer(this, 124, 5);
      head.addBox(-4F, -2F, -6F, 8, 8, 6);
      head.setRotationPoint(0F, 4F, -8F);
      head.setTextureSize(256, 128);
      head.mirror = true;
      setRotation(head, 0F, 0F, 0F);
      body = new ModelRenderer(this, 89, 30);
      body.addBox(-10F, -10F, -7F, 20, 28, 18);
      body.setRotationPoint(0F, 5F, 2F);
      body.setTextureSize(256, 128);
      body.mirror = true;
      setRotation(body, 1.570796F, 0F, 0F);
      leg1 = new ModelRenderer(this, 24, 16);
      leg1.addBox(-3F, 0F, -2F, 4, 12, 4);
      leg1.setRotationPoint(-7F, 12F, 17F);
      leg1.setTextureSize(256, 128);
      leg1.mirror = true;
      setRotation(leg1, 0F, 0F, 0F);
      leg2 = new ModelRenderer(this, 0, 40);
      leg2.addBox(-1F, 0F, -2F, 4, 12, 4);
      leg2.setRotationPoint(7F, 12F, 17F);
      leg2.setTextureSize(256, 128);
      leg2.mirror = true;
      setRotation(leg2, 0F, 0F, 0F);
      leg3 = new ModelRenderer(this, 24, 40);
      leg3.addBox(-3F, 0F, -3F, 4, 12, 4);
      leg3.setRotationPoint(-7F, 12F, -5F);
      leg3.setTextureSize(256, 128);
      leg3.mirror = true;
      setRotation(leg3, 0F, 0F, 0F);
      leg4 = new ModelRenderer(this, 0, 16);
      leg4.addBox(-1F, 0F, -3F, 4, 12, 4);
      leg4.setRotationPoint(7F, 12F, -5F);
      leg4.setTextureSize(256, 128);
      leg4.mirror = true;
      setRotation(leg4, 0F, 0F, 0F);
      horn1 = new ModelRenderer(this, 8, 8);
      horn1.addBox(-4F, -7F, 2F, 1, 2, 1);
      horn1.setRotationPoint(0F, 3F, -7F);
      horn1.setTextureSize(256, 128);
      horn1.mirror = true;
      setRotation(horn1, 0F, 0F, 0F);
      horn2 = new ModelRenderer(this, 16, 8);
      horn2.addBox(3F, -7F, 2F, 1, 2, 1);
      horn2.setRotationPoint(0F, 3F, -7F);
      horn2.setTextureSize(256, 128);
      horn2.mirror = true;
      setRotation(horn2, 0F, 0F, 0F);
      tail = new ModelRenderer(this, 54, 7);
      tail.addBox(-1F, 1F, -11F, 2, 2, 11);
      tail.setRotationPoint(0F, -1F, 19F);
      tail.setTextureSize(256, 128);
      tail.mirror = true;
      setRotation(tail, 1.570796F, 0F, 0F);
      head.addChild(horn1);
      head.addChild(horn2);
  }
  
  public void render(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor)  {
	  super.render(entity, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor);
	  setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, entity);

	  if (this.isChild) {
		  GlStateManager.pushMatrix();
          GlStateManager.translate(0.0F, this.childYOffset * scaleFactor, this.childZOffset * scaleFactor);
          head.render(scaleFactor);
          GlStateManager.popMatrix();
          GlStateManager.pushMatrix();
          GlStateManager.scale(0.5F, 0.5F, 0.5F);
          GlStateManager.translate(0.0F, 24.0F * scaleFactor, 0.0F);
		  body.render(scaleFactor);
          leg1.render(scaleFactor);
		  leg2.render(scaleFactor);
		  leg3.render(scaleFactor);
		  leg4.render(scaleFactor);
		  tail.render(scaleFactor);		
		  GlStateManager.popMatrix();  	  
	  } else {
		  head.render(scaleFactor);
		
		  body.render(scaleFactor);
		  leg1.render(scaleFactor);
		  leg2.render(scaleFactor);
		  leg3.render(scaleFactor);
		  leg4.render(scaleFactor);
		  tail.render(scaleFactor);		  
	  }
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z) {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, Entity entity) {
	  super.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, entity);
	  this.head.rotateAngleX = headPitch * 0.017453292F;
	  this.head.rotateAngleY = netHeadYaw * 0.017453292F;
	  
	  this.tail.rotateAngleX = (limbSwing * 0.6662F) * 0.017453292F;
	  
	  this.leg1.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F) * 1.4F * limbSwingAmount;
      this.leg2.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F + (float)Math.PI) * 1.4F * limbSwingAmount;
      this.leg3.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F + (float)Math.PI) * 1.4F * limbSwingAmount;
      this.leg4.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F) * 1.4F * limbSwingAmount;
  }
}
